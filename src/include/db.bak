/***************************************************************************
 *  file: db.h , Database module.                          Part of DIKUMUD *
 *  Usage: Loading/Saving chars booting world.                             *
 *  Copyright (C) 1990, 1991 - see 'license.doc' for complete information. *
 *                                                                         *
 *  Copyright (C) 1992, 1993 Michael Chastain, Michael Quan, Mitchell Tse  *
 *  Performance optimization and bug fixes by MERC Industries.             *
 *  You can use our stuff in any way you like whatsoever so long as ths   *
 *  copyright notice remains intact.  If you like it please drop a line    *
 *  to mec@garnet.berkeley.edu.                                            *
 *                                                                         *
 *  This is free software and you are benefitting.  We hope that you       *
 *  share your changes too.  What goes around, comes around.               *
 ***************************************************************************/
/* $Id: db.bak,v 1.1 2002/06/13 04:32:22 dcastle Exp $ */
#ifndef DB_H_
#define DB_H_

extern "C" {
  #include <stdio.h>
  #include <time.h>
}

#include <character.h>

#ifdef NeXT
#ifndef bool
#define bool int
#endif
#endif

#define MAX_ZONE     155 
#define MAX_INDEX   2560
#define MAX_ROOM    9144 
#define MAX_RESET  10192  
#ifndef LONG_MAX
#define LONG_MAX    2147483467
#define LONG_MIN    -2147483467
#endif

/* data files used by the game system */


#define VERSION_NUMBER    2     /* used for changing pfile format */

/* public procedures in db.c */

void load_emoting_objects(void);
void boot_db(void);
int  create_entry(char *name);
void zone_update(void);
void init_char(CHAR_DATA *ch);
void clear_char(CHAR_DATA *ch);
void clear_object(struct obj_data *obj);
void reset_char(CHAR_DATA *ch);
void free_char(CHAR_DATA *ch);
int  real_room(int virt);
char *fread_string(FILE *fl, int hasher);
int  real_object(int virt);
int  real_mobile(int virt);
int  fread_int(FILE *fl, long minval, long maxval);
char fread_char (FILE *fl);

#define REAL 0
#define VIRTUAL 1

struct obj_data  *read_object(int nr, FILE *fl);
CHAR_DATA *read_mobile(int nr, FILE *fl);
struct obj_data  *clone_object(int nr);
CHAR_DATA *clone_mobile(int nr);


extern time_t start_time; /* mud start time */


/* structure for the reset commands */
struct reset_com
{
    char command;   /* current command                      */ 
    bool if_flag;   /* if TRUE: exe only if preceding exe'd */
    int arg1;       /*                                      */
    int arg2;       /* Arguments to the command             */
    int arg3;       /*                                      */

    /* 
    *  Commands:              *
    *  'M': Read a mobile     *
    *  'O': Read an object    *
    *  'P': Put obj in obj    *
    *  'G': Obj to char       *
    *  'E': Obj to char equip *
    *  'D': Set state of door *
    */
};



/* zone definition structure. for the 'zone-table'   */
struct zone_data
{
    char *name;             /* name of this zone                  */
    int lifespan;           /* how long between resets (minutes)  */
    int age;                /* current age of ths zone (minutes) */
    int top;                /* upper limit for room vnums in this zone */
    int bottom_rnum;
    int top_rnum;
    
    int reset_mode;         /* conditions for reset (see below)   */
    struct reset_com *cmd;  /* command table for reset             */

    /*
    *  Reset mode:                              *
    *  0: Don't reset, and don't update age.    *
    *  1: Reset if no PC's are located in zone. *
    *  2: Just reset.                           *
    */
};




/* element in monster and object index-tables   */
struct index_data
{
    int virt;    /* virt number of ths mob/obj           */
    int number;     /* number of existing units of ths mob/obj */
    int (*non_combat_func)(CHAR_DATA*, struct obj_data *, int, char*); // non Combat special proc
    int (*combat_func)(CHAR_DATA*, struct obj_data *, int, char*); // combat special proc
    void *item;     /* the mobile/object itself                 */
};


struct help_index_element
{
    char *keyword;
    long pos;
};

extern int exp_table[61+1];

#endif
